---
title: "Prahl_et_al Data Analysis"
author: "Jordan Prahl"
date: "6/29/2021"
output: html_document
---



## Initialization of count data

First, I must read in all of our ReadsPerCount.out.tab files and combine them into one matrix. The reads files have already been moved into the R working directory. I remove labeling artifacts pulled over from the file path, and then use an adaptation of the limma-voom processing method. Gene information is pulled from org.HS.eg.db.

```{r, Library, error=F, message=F, warning=F}
#devtools::install_github("cmartin/ggConvexHull")
#BiocManager::install(  c("limma", "edgeR", "Glimma", "org.Hs.eg.db", "gplots", "RColorBrewer", "NMF", "BiasedUrn", "devtools", "gridExtra", "cowplot", 'EnhancedVolcano', "clusterProfiler", 'ggnewscale', 'ggupset', "VennDiagram", "motifbreakR", "topGO", "ALL", "enrichplot", "sjplot", "clusterProfiler", "stargazer", "knitr", "VennDiagram", "motifbreakR","gprofiler2"), update=T, ask=F)
#BiocManager::install("sjPlot")
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(RColorBrewer)
library(NMF)
library(dplyr)
library(tidyverse)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(reshape2)
library(ggplot2)
library(ggfortify)
library(magrittr)
library(tibble)
library(DataCombine)
library(plyr)
library(EnhancedVolcano)
library(devtools)
library(ggConvexHull)
library(gridExtra)
library(cowplot)
library(topGO)
library(ALL)
library(enrichplot)
library(sjPlot)
library(clusterProfiler)
library(stargazer)
library(knitr)
library(VennDiagram)
library(motifbreakR)
library(readr)
library(gprofiler2)
library(ggpubr)
```

```{r, Data_prep, message=F}
ff <- list.files( path = "./readCounts", pattern = "_ReadsPerGene.out.tab$", full.names = TRUE ) # make a list of file names
counts.files <- lapply( ff, read.table, skip = 4 ) ### read files and create data frame without first 4 rows of meta-data
counts <- sapply( counts.files, function(x) x[ , 2 ] ) ### put counts for each sample into a matrix based on values in the second column (non-stranded counts)
ff <- gsub( "_ReadsPerGene.out.tab", "", ff ) ### remove "_ReadsPerGene.out.tab" from end of file names
ff <- gsub( "./readCounts", "", ff ) ### remove file path from sample names
colnames(counts) <- ff ### add column labels to count matrix (sample names)
row.names(counts) <- counts.files[[1]]$V1 ### add the ensemble ID to rows of count matrix

rownames(counts) <- gsub("\\..+","",rownames(counts)) ### Remove decimals from ENSEMBLE IDs
counts <- unique.matrix(counts) ### Remove duplicates
colnames(counts) <- gsub("/","",colnames(counts)) ### Remove slash from column names
my_dge <- DGEList(counts, genes=rownames(counts)) ### Create a DGE list from counts


# Here we are taking gene information from the org.Hs.eg.db and applying it to our gene list in my_dge
my_dge$genes$Symbol <- mapIds(org.Hs.eg.db,
                         rownames(my_dge),
                         keytype="ENSEMBL", column="SYMBOL")

```

# EdgeR 

## Thresholding my count data
Now I have all of my count data with gene info in one object; my_dge. I am going to plot my raw counts against their cpm data to determine what the threshold for low counts should be. In general, a threshold should be chosen for a CPM corresponding to about 10 reads. In the example (https://combine-australia.github.io/RNAseq-R/06-rnaseq-day1.html), they use 0.5 cpm. For my data it looks like that will be closer to 0.125.

```{r}

my_dge <- calcNormFactors(my_dge, method = "TMM") # Calculate the normalization factor

myCPM <-cpm(my_dge) #Create an object transformed for counts per million

plot(myCPM[,1],my_dge$counts[,1],ylim=c(0,20),xlim=c(0,0.25))  
abline(h=10, v=0.125, col="red")

thresh <- myCPM > 0.125 # Apply my newly determined threshold to my cpm data
table(rowSums(thresh))
keep <- rowSums(thresh) >= 2 # keep only those genes which are expressed in at least 2 samples (since we have replicates, anything unique to one sample is considered noise).
summary(keep)

my_dge <- my_dge[keep, , keep.lib.sizes=FALSE] #We filtered out any genes not expressed in our samples
dim(my_dge) # confirmed that the TRUE values from our summary(keep) matches the number of rows 

my_dge$samples$Geno <- c("A_","A_","A_","G_","G_","G_","AG","AG","AG", rep("LD", times=9), rep("UD", times=9))
my_dge$samples$ends <- c(rep("paired",times=10), "single", "paired", "single", "paired", rep("single", times=4), "paired", "single", "paired", "single", "paired", rep("single", times=4))
my_dge$samples$crispr <- c(rep("exposed", times=9), rep("naive", times=18))
my_dge$samples$edited <- c(rep("TRUE", times=6), rep("FALSE", times=21))
my_dge$samples$investigator <- c(rep("JP", times=9), rep("TT", times=18))
my_dge$samples$diff <- c(rep("diff", times=18), rep("undiff", times=9))
my_dge$samples$date <- c(rep("202002", times=9), "201702", "201611", "201702", "201611", "201702", "201611", "201611", "201611", "201611", "201702", "201611", "201702", "201611", "201702", "201611", "201611", "201611", "201611")

logcounts <- cpm(my_dge,log=TRUE) # Log transform the cpm data into a new object for later use. Other methods of log transformation will return error from zero-count values. This method provides a slight offset so that we don't lose data.

```

## QC the library sizes
These plots will provide some insight into the library diversity. Ideally, your library sizes will be about equal, but that's not the case with our data due to the experiments being done in slightly different ways at different times. The diversity is evident from the barplots but shouldn't be an issue after we correct for cpm (as seen from the normalized box/whisker plots).

```{r, Library QC plots}
barplot(my_dge$samples$lib.size,names=colnames(my_dge),las=2) # Quality control step, here we see that several of our samples were sequenced to a much greater depth. Normalizing to CPM should address any problems here.

# Another quality control step looking at CPM normalized read-counts. Here we see our transformation has normalized read distribution.
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2, main="Boxplots of logCPMs")
abline(h=median(logcounts),col="blue")
```


## Principle component analysis


```{r, PCA data prep}

pca_data <- prcomp(t(logcounts), scale = T)
pData <- data.frame(pca_data$x)
pca_weight <- pca_data$rotation

pData$Geno <- c("A/-","A/-","A/-","G/-","G/-","G/-","A/G","A/G","A/G", rep("LD", times=9), rep("UD", times=9))

var_explained <- pca_data$sdev^2/sum(pca_data$sdev^2) # Add variance to plot axis
```


```{r}

pca.fig <- function(data, x_pc, y_pc, grp) {
  vvar1 <- as.numeric(substring(x_pc,3,3))
  vvar2 <- as.numeric(substring(y_pc,3,3))
  ggplot(data=data, aes_string(x=paste0(x_pc), y=paste0(y_pc))) +
    geom_point(aes(color = grp),size=3) +
    theme_minimal() +
    ggtitle("PCA of RNAseq Data") +
    xlab(paste0(x_pc, ": ", round(var_explained[vvar1]*100,1),"% variance explained")) + 
    ylab(paste0(y_pc, ": ", round(var_explained[vvar2]*100,1),"% variance explained")) +
    geom_convexhull(alpha = 0.4,aes(fill = grp))
}

a <- pca.fig(pData, 'PC1','PC2', pData$Geno)
b <- pca.fig(pData, 'PC3', "PC4", pData$Geno)
c <- pca.fig(pData, 'PC5', "PC6", pData$Geno)
d <- pca.fig(pData, 'PC7', "PC8", pData$Geno)

cowplot::plot_grid(a, b,c,d, labels = "AUTO", nrow = 2, ncol = 2)

pca.sub <- subset(pData, pData$diff =="diff")
pca.sub

pca.fig(pca.sub, 'PC1','PC2', pca.sub$Geno)
```



```{r, PCA without the LD and UD}

logcounts2 <- logcounts[,1:9]
pca_data2 <- prcomp(t(logcounts2), scale = T)
pData <- data.frame(pca_data2$x)
pca_weight <- data.frame(pca_data$rotation)

pData$Geno <- c("A/-","A/-","A/-","G/-","G/-","G/-","A/G","A/G","A/G")

var_explained <- pca_data2$sdev^2/sum(pca_data$sdev^2) # Add variance to plot axis

a <- pca.fig(pData, 'PC1','PC2', pData$Geno)
a

```


## Combine gene data and count data

Next, I assemble my thesholded count data along with the gene info into a single object. It's important to note that the data was thresholded by CPM but the object still contains the raw count data. This object will be what I use later to do gene ontology.

```{r, Assemble cpm data with gene names}

expr_data <- data.frame(cpm(my_dge, log=T)) %>% 
  rownames_to_column(var="genes") %>%
  dplyr::left_join(data.frame(my_dge$genes), by="genes") %>%
  dplyr::select(genes,Symbol,everything())

colnames(expr_data) <- gsub("X.", "", colnames(expr_data)) # Remove the "X." prefix from sample names

#write.csv(data.frame(expr_data), './cpm_data.csv') ### Save here as a checkpoint

```


## Z-score
Now that I have my data in counts per million, we normalize the genes using a z-score calculation. This calculation takes the observed value, subtracts the average value for each gene, and then divides by the standard deviation per gene to give you a value of deviance from the norm.I am confident that there's a much easier way to do this, but this is how I did it.

```{r Z-score calculation, TTest, and Fold-change}
zdata <- expr_data   ### Don't work on the primary data set
zdata$avg <- rowMeans(expr_data[,3:29]) ### Add a column for row averages
zdata$sd <- apply(expr_data[,3:29],1,sd) ### Add a column for row standard deviations
zdata1 <- cbind(zdata[,1:2], ((zdata[,3:29]-zdata[,30])/zdata[,31])) ### Make a new data frame with the gene ID/symbol and Z-scores (observed - average / sd). 


#write.csv(data.frame(compData), './20210421_comparison_data.csv') ### Save here as a checkpoint

```



# Limma-Voom method

Working from the limma voom method on github. https://ucdavis-bioinformatics-training.github.io/2018-June-RNA-Seq-Workshop/thursday/DE.html
```{r, limma voom from github}

d <- my_dge

# Create a new variable “group” that defines interactions between groups
group <- interaction(d$samples$Geno) # We could use this to look at any of our parameters

# Multidimensional scaling plot
plotMDS(d, col = as.numeric(group))

##### Voom transformation and calculation of variance weights

# Specify the model to be fitted. We do this before using voom since voom uses variances of the model residuals (observed - fitted)

mm <- model.matrix(~0 + group)

# The above specifies a model where each coefficient corresponds to a group mean Voom

y <- voom(d, mm, plot = T)

```


### What is voom doing?

1. Counts are transformed to log2 counts per million reads (CPM), where “per million reads” is defined based on the normalization factors we calculated earlier
2. A linear model is fitted to the log2 CPM for each gene, and the residuals are calculated
3. A smoothed curve is fitted to the sqrt(residual standard deviation) by average expression (see red line in plot above)
4. The smoothed curve is used to obtain weights for each gene and sample that are passed into limma along with the log2 CPMs.

More details at https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29


### Fitting linear models with limma

lmFit fits a linear model using weighted least squares for each gene:

```{r}
fit <- lmFit(y, mm)
```

Comparisons between groups (log fold-changes) are obtained as contrasts of these fitted linear models:

Specify which groups to compare:

Comparison between 

```{r, COMPARISON_SETUP}
contr <- makeContrasts(groupA_ - groupAG, groupG_ - groupAG, groupA_ - groupG_, groupAG - groupLD, groupLD - groupUD,levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp <- eBayes(tmp)
tt0 <- topTable(tmp, sort.by = "F", n = Inf)


contr <- makeContrasts(groupA_ - groupAG, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp1 <- eBayes(tmp)
tt1 <- topTable(tmp1, sort.by = "P", n = Inf)
length(which(tt1$adj.P.Val < 0.05)) # How many differentially expressed genes are there?

contr <- makeContrasts(groupG_ - groupAG, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp2 <- eBayes(tmp)
tt2 <- topTable(tmp2, sort.by = "P", n = Inf)
length(which(tt2$adj.P.Val < 0.05))

contr <- makeContrasts(groupA_ - groupG_, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp3 <- eBayes(tmp)
tt3 <- topTable(tmp3, sort.by = "P", n = Inf)
length(which(tt3$adj.P.Val < 0.05))

contr <- makeContrasts(groupAG - groupLD, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp4 <- eBayes(tmp)
tt4 <- topTable(tmp4, sort.by = "P", n = Inf)
length(which(tt4$adj.P.Val < 0.05))

contr <- makeContrasts(groupLD - groupUD, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr) # Estimate contrast for each gene
tmp5 <- eBayes(tmp)
tt5 <- topTable(tmp5, sort.by = "P", n = Inf)
length(which(tt5$adj.P.Val < 0.05))

#write.csv(data.frame(tt1), './20210428_A_v_AG.csv')
#write.csv(data.frame(tt2), './20210428_G_v_AG.csv')
#write.csv(data.frame(tt3), './20210428_A_v_G_.csv')
#write.csv(data.frame(tt4), './20210428_AG_v_LD.csv')
#write.csv(data.frame(tt5), './20210428_LD_v_UD.csv')


multiFull <- merge( merge( merge( merge(merge(tt1, tt2, by="genes", suffixes = c("_A_v_AG","_G_v_AG")), tt3, by="genes", suffixes = c("", "_A_v_G")  ), tt4, by="genes", suffixes = c("", "_AG_v_LD")  ), tt5, by="genes", suffixes = c("", "_LD_v_UD")), zdata1, by="genes", suffixes=c("", "_Zscore"))

compData <- multiFull
colnames(compData) <- c("genes", "Symbol", "logFC_A_v_AG", "AveExpr_A_v_AG", "t_A_v_AG", "P.Value_A_v_AG","adj.P.Val_A_v_AG", "B_A_v_AG", "Symbol_G_v_AG","logFC_G_v_AG", "AveExpr_G_v_AG", "t_G_v_AG", "P.Value_G_v_AG", "adj.P.Val_G_v_AG", "B_G_v_AG", "Symbol_A_v_G", "logFC_A_v_G", "AveExpr_A_v_G","t_A_v_G","P.Value_A_v_G", "adj.P.Val_A_v_G", "B_A_v_G", "Symbol_AG_v_LD", "logFC_AG_v_LD", "AveExpr_AG_v_LD", "t_AG_v_LD", "P.Value_AG_v_LD", "adj.P.Val_AG_v_LD", "B_AG_v_LD","Symbol_LD_v_UD", "logFC_LD_v_UD", "AveExpr_LD_v_UD", "t_LD_v_UD", "P.Value_LD_v_UD", "adj.P.Val_LD_v_UD", "B_LD_v_UD", "Symbol_Zscore", "JPA1", "JPA2", "JPA3", "JPG1", "JPG2", "JPG3","JPW1","JPW2", "JPW3", "LD1_PE", "LD1_SE", "LD2_PE", "LD2_SE", "LD3_PE", "LD3_SE", "LD4_SE", "LD5_SE", "LD6_SE", "LU1_PE", "LU1_SE", "LU2_PE", "LU2_SE", "LU3_PE", "LU3_SE", "LU4_SE", "LU5_SE", "LU6_SE")



#write.csv(data.frame(compData), './20210521_full_comparisons.csv')
```

* logFC: log2 fold change of NOT SHOWN
* AveExpr: Average expression across all samples, in log2 CPM
* t: logFC divided by its standard error NOT SHOWN
* P.Value: Raw p-value (based on t) from test that logFC differs from 0
* adj.P.Val: Benjamini-Hochberg false discovery rate adjusted p-value
* B: log-odds that gene is DE (arguably less useful than the other columns)


```{r, single gene expression}

zdata2 <- zdata1
colnames(zdata2) <- c('genes', 'symbol', rep('A/-', 3), rep('G/-', 3), rep('A/G', 3), rep("LD", 9), rep("UD", 9))

{
GENE <- "SNCA"
gdata1 <- subset(zdata2, zdata2[,"symbol"]==GENE)
gdata1 <- gdata1[,-1]
M.zdata <- melt(gdata1)
M.zdata$geno <- c(rep('A/-', 3), rep('G/-', 3), rep('A/G', 3), rep("LD", 9), rep("UD", 9))


my_comparisons <- list(   c("A/-", "A/G"), 
                          c("G/-", "A/G"), 
                          c("A/-", "G/-")
                      )



compare_means(value ~ geno, data = M.zdata)

g <- ggplot(M.zdata[1:9,], aes(geno,value))
g + geom_boxplot() +
  #stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  theme_minimal() +
  ylab("Z-score") + xlab("Genotype") + ggtitle(GENE) + 
  theme(
    plot.title = element_text(hjust = 0.5, size=25, face="bold"), 
    axis.text.x = element_text(size=15),
    axis.text.y = element_text(size=12)
  ) 
}

```


## Gene Ontology

```{r, Gene ontology}
d <- compData
head(d)
{
dd <- subset(d, d$adj.P.Val_G_v_AG < 0.05 & d$logFC_G_v_AG < -1)
ego <- clusterProfiler::enrichGO(gene = dd$genes,
                universe = d$genes,
                keyType = "ENSEMBL",
                OrgDb = org.Hs.eg.db,
                ont = "BP",
                pAdjustMethod = "fdr",
                readable = T   )
ego_G_dn <- ego
sim_G_dn <- clusterProfiler::simplify(ego)
}

head(ego_G_dn)


# TABLE
{
egoTable <- head(ego_G_dn, n=25)
df <- egoTable[,c(1:4,7)]
rownames(df) <- NULL
df %>% dplyr::mutate_if(is.numeric, funs(as.character(signif(., 3)))) %>%
    sjPlot::tab_df(., alternate.rows = T, 
           title = "G/- vs A/G; down-regulated gene annotations",
           file = "gsea_G_v_AG_dn.doc"
           )
}


```


## Volcano plots


```{r, Volcano plot}

nearLab <- c("SNCA", "CCSER1", "NAP1L5", "FAM13A-AS1", "FAM13A", "MMRN1", "GPRIN3", "TIGD2", "HERC3")
foxLab <- c("FOXO1", "FOXA3", "FOXA1", "FOXP2", "FOXO4", "FOXD1", "FOXC1", "FOXA2", "FOXO3", "FOXF2")
lab1 <- c("none")


EV_func <- function(data, xx, yy, xxlm, yylm, glab, tit1) {
  EnhancedVolcano::EnhancedVolcano(data, 
              lab= data$Symbol, 
              x= xx, 
              y= yy,
              pCutoff = 0.05,
              FCcutoff = 1,
              selectLab = glab,
              colAlpha = 0.5,
              xlim = xxlm,
              ylim = yylm,
              legendPosition = "null",
              legendLabSize = 12,
              col = c("grey", "grey", "grey", "red"),
              drawConnectors = T,
              widthConnectors = 1,
              boxedLabels = F,
              subtitle = tit1,
              title = "Differential expression",
              #caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
  )
  }

```



```{r}

EV_func(compData, 'logFC_LD_v_UD', 'adj.P.Val_LD_v_UD', c(-10,10), c(0,30), foxLab, "Differentiated versus Undifferentiated LUHMES cells")

EV_func(compData, 'logFC_G_v_AG', 'adj.P.Val_G_v_AG', c(-11.5,11.5), c(0,12), lab1, "G/- versus A/G clones")

EV_func(compData, 'logFC_A_v_AG', 'adj.P.Val_A_v_AG', c(-11.5,11.5), c(0,12), lab1, "A/- versus A/G clones")

EV_func(compData, 'logFC_A_v_G', 'adj.P.Val_A_v_G', c(-15,15), c(0,12), lab1, "A/- versus G/- clones")

```


## MotifbreakR

```{r}
#BiocManager::install(c('SNPlocs.Hsapiens.dbSNP142.GRCh37', "BSgenome.Hsapiens.UCSC.hg19"))

library(MotifDb)
library(BSgenome)
library(SNPlocs.Hsapiens.dbSNP142.GRCh37) # dbSNP137 in hg19
library(BSgenome.Hsapiens.UCSC.hg19)

MotifDb

pca.snps <- "rs356182"
snps.mb <- motifbreakR::snps.from.rsid(rsid = pca.snps,
                          dbSNP = SNPlocs.Hsapiens.dbSNP142.GRCh37,
                          search.genome = BSgenome.Hsapiens.UCSC.hg19)

snps.mb
table(mcols(MotifDb)$organism, mcols(MotifDb)$dataSource)

data(motifbreakR_motif)
motifbreakR_motif

data(hocomoco)
hocomoco

results <- motifbreakR::motifbreakR(snpList = snps.mb, filterp = TRUE,
                       pwmList = motifbreakR_motif,
                       threshold = 1e-4,
                       #method = "ic",
                       bkg = c(A=0.25, C=0.25, G=0.25, T=0.25),
                       #BPPARAM = BiocParallel::bpparam()
                       )

results

results.p <- calculatePvalue(results)

results2 <- results.p[order(results.p$alleleDiff)]
results2
results3 <- head(results2, n=10)
results3



olap <- c("FOXA1", "FOXC1", "FOXD1")
results4 <- subset(results, results$effect == "strong" & results$dataSource == "HOCOMOCO")
results4 <- calculatePvalue(results4)
results4
results5 <- subset(results4, results4$geneSymbol == c("FOXA1", "FOXC1", "FOXD1"))
plotMB(results = results4, rsid = "rs356182", effect = "strong")

write.csv(data.frame(results2), './20210623_motifbreakR_results_full.csv')

```

## Session Info


```{r}
sessionInfo()
```

